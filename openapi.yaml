openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
- description: Generated server url
  url: http://localhost:8080
tags:
- description: Operations for Examples.
  name: Example
paths:
  /api/v1/example:
    get:
      operationId: getEntities
      parameters:
      - description: Zero-based page index (0..N)
        in: query
        name: page
        schema:
          type: integer
          default: 0
      - description: The size of the page to be returned
        in: query
        name: size
        schema:
          type: integer
          default: 20
      - description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        in: query
        name: sort
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageDetailsExampleDTO"
          description: The entity list has been successfully returned.
      summary: Gets paginated and sorted entities.
      tags:
      - Example
    post:
      operationId: createEntity
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExampleDTO"
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExampleDTO"
          description: Entity successfully created.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDTO"
          description: The request body is invalid.
      summary: Creates a new entity.
      tags:
      - Example
    put:
      operationId: updateEntity
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExampleDTO"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExampleDTO"
          description: Entity successfully updated.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDTO"
          description: The request body is invalid.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDTO"
          description: The requested entity was not found.
      summary: Update an existing entity.
      tags:
      - Example
  /api/v1/example/search:
    get:
      operationId: searchExamples
      parameters:
      - in: query
        name: searchTerms
        required: true
        schema:
          type: array
          items:
            type: string
      - description: Zero-based page index (0..N)
        in: query
        name: page
        schema:
          type: integer
          default: 0
      - description: The size of the page to be returned
        in: query
        name: size
        schema:
          type: integer
          default: 20
      - description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
        in: query
        name: sort
        schema:
          type: array
          items:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageDetailsExampleDTO"
          description: The Example list has been successfully returned based on the
            search terms.
      summary: Gets paginated and sorted Examples based the search terms.
      tags:
      - Example
  /api/v1/example/statistics:
    get:
      operationId: getWordStatistics
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
          description: The word count map.
      summary: Returns the number of words for each user in order of cardinality.
      tags:
      - Example
  /api/v1/example/{id}:
    delete:
      operationId: deleteEntity
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: No Content
      summary: Deletes an entity by its id.
      tags:
      - Example
    get:
      operationId: getEntityById
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExampleDTO"
          description: The requested entity has been successfully returned.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorDTO"
          description: The requested entity was not found.
      summary: Gets entity by its id.
      tags:
      - Example
components:
  schemas:
    ErrorDTO:
      type: object
      properties:
        details: {}
        id:
          type: string
        message:
          type: string
        stackTrace:
          type: string
      required:
      - id
      - message
    ExampleDTO:
      type: object
      properties:
        createdDate:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
        modifiedDate:
          type: string
          format: date-time
        name:
          type: string
          maxLength: 20
          minLength: 3
      required:
      - name
    PageDetailsExampleDTO:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: "#/components/schemas/ExampleDTO"
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        sortOrders:
          type: array
          items:
            $ref: "#/components/schemas/SortOrder"
        sorted:
          type: boolean
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
      required:
      - content
      - pageNumber
      - pageSize
      - sortOrders
      - sorted
      - totalElements
      - totalPages
    SortOrder:
      type: object
      properties:
        direction:
          type: string
        property:
          type: string
      required:
      - direction
      - property
