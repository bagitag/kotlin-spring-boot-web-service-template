name: template-app-dev-setup
services:
  database:
    image: postgres:latest
    environment:
      - POSTGRES_DB=example
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=12345
    ports:
      - "5432:5432"
    networks:
      - example-network

  pgAdmin:
    depends_on:
      - database
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=12345
    ports:
      - "8070:80"
    volumes:
      - type: bind
        source: ./.docker/pgadmin/servers.json
        target: /pgadmin4/servers.json
    networks:
      - example-network

  otel-collector:
    image: otel/opentelemetry-collector:latest
    command:
      - --config=/etc/otelcol-contrib/otel-collector.yml
    volumes:
      - type: bind
        source: ./.docker/otel-collector.yml
        target: /etc/otelcol-contrib/otel-collector.yml
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver
      - "9099:9099" # Prometheus metrics exposed by the Collector: http://localhost:9099/metrics
      - "55679:55679" # zpages extension (http://localhost:55679/debug/servicez, http://localhost:55679/debug/tracez)
      - "13133:13133" # health_check extension (http://localhost:13133/healthz)
    networks:
      - example-network

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - type: bind
        source: ./.docker/prometheus/prometheus.yml
        target: /etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - example-network

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    networks:
      - example-network

  tempo:
    image: grafana/tempo:latest
    command: [ "-config.file=/etc/tempo.yml" ]
    volumes:
      - type: bind
        source: ./.docker/tempo/tempo.yml
        target: /etc/tempo.yml
    ports:
      - "3200"
      - "4317"  # otlp grpc
    networks:
      - example-network

  grafana:
    image: grafana/grafana:latest
    volumes:
      - type: bind
        source: ./.docker/grafana/grafana-datasource.yml
        target: /etc/grafana/provisioning/datasources/datasource.yml
      - type: bind
        source: ./.docker/grafana/grafana-dashboard.yml
        target: /etc/grafana/provisioning/dashboards/dashboard.yml
      - type: bind
        source: ./.docker/grafana/dashboards
        target: /var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - example-network

  service:
    image: mock/jsonplaceholder:latest
    build:
      dockerfile_inline: |
        FROM node:latest
        RUN npm install -g json-server
        WORKDIR /data
        EXPOSE 80
        ENTRYPOINT ["sh", "-c", "json-server -p 80 db.json"]
    configs:
      - source: service_config
        target: /data/db.json
    ports:
      - "8060:80"

networks:
  example-network:
    driver: bridge

configs:
  service_config:
    content: |
      {
        "users": [
          { "id": 1, "name": "Leanne Graham", "username": "Bret", "email": "Sincere@april.biz" },
          { "id": 2, "name": "Ervin Howell","username": "Antonette", "email": "Shanna@melissa.tv" }
        ],
        "posts": [
          { "userId": 1, "id": 1, "title": "sunt aut", "body": "quia et suscipit\nsuscipit recusandae" },
          { "userId": 1, "id": 2, "title": "qui est esse", "body": "est rerum tempore vitae\nsequi sint nihil" },
          { "userId": 1, "id": 3, "title": "ea molestias quasi", "body": "et iusto sed quo iure\nvoluptatem occaecati"},
          { "userId": 2, "id": 11, "title": "et ea vero", "body": "delectus reiciendis molestiae occaecati non minima"}
        ]
      }
