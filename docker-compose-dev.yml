name: template-app-dev-setup
services:
  database:
    image: postgres:latest
    environment:
      - POSTGRES_DB=example
      - POSTGRES_USER=test
      - POSTGRES_PASSWORD=12345
    ports:
      - "5432:5432"
    networks:
      - example-network

  pgAdmin:
    depends_on:
      - database
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@admin.com
      - PGADMIN_DEFAULT_PASSWORD=12345
    ports:
      - "8070:80"
    configs:
      - source: pgadmin_config
        target: /pgadmin4/servers.json
    networks:
      - example-network

  otel-collector:
    image: otel/opentelemetry-collector:latest
    configs:
      - source: otel_config
        target: /etc/otelcol/config.yaml
    ports:
      - "4317:4317" # OTLP gRPC receiver
      - "4318:4318" # OTLP HTTP receiver
      - "9099:9099" # Prometheus metrics exposed by the Collector: http://localhost:9099/metrics
      - "55679:55679" # zpages extension (http://localhost:55679/debug/servicez, http://localhost:55679/debug/tracez)
      - "13133:13133" # health_check extension (http://localhost:13133/healthz)
    networks:
      - example-network

  prometheus:
    image: prom/prometheus:latest
    configs:
      - source: prometheus_config
        target: /etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - example-network

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    networks:
      - example-network

  grafana:
    image: grafana/grafana:latest
    configs:
      - source: grafana_datasource_config
        target: /etc/grafana/provisioning/datasources/datasources.yml
      - source: grafana_dashboard_config
        target: /etc/grafana/provisioning/dashboards/main.yaml
    volumes:
      - type: bind
        source: ./.grafana
        target: /var/lib/grafana/dashboards
#      - ./grafana/asd:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - example-network

  service:
    image: mock/jsonplaceholder:latest
    build:
      dockerfile_inline: |
        FROM node:latest
        RUN npm install -g json-server
        WORKDIR /data
        EXPOSE 80
        ENTRYPOINT ["sh", "-c", "json-server -p 80 db.json"]
    configs:
      - source: service_config
        target: /data/db.json
    ports:
      - "8060:80"

networks:
  example-network:
    driver: bridge

configs:
  pgadmin_config:
    content: |
      {
        "Servers": {
          "1": {
            "Name": "PostgreSQL",
            "Group": "Servers",
            "Host": "database",
            "Port": 5432,
            "Username": "test",
            "MaintenanceDB": "postgres",
            "SSLMode": "prefer"
          }
        }
      }

  prometheus_config:
    content: |
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: '10s'
          static_configs:
            - targets: ['otel-collector:9099']
              labels:
                application: 'template-app'

  grafana_datasource_config:
    content: |
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          access: proxy
          url: http://prometheus:9090
          isDefault: true
          editable: false
        - name: Loki
          type: loki
          access: proxy
          url: http://loki:3100
          editable: false

  grafana_dashboard_config:
    content: |
      apiVersion: 1
      providers:
        - name: Dashboard provider
          allowUiUpdates: true
          options:
            path: /var/lib/grafana/dashboards
            foldersFromFilesStructure: true

  otel_config:
    content: |
      receivers:
        otlp:
          protocols:
            http:
              endpoint: 0.0.0.0:4318
            grpc:
              endpoint: 0.0.0.0:4317

      processors:
        batch:
        memory_limiter:
            check_interval: 5s
            limit_mib: 1024
            limit_percentage: 90
        attributes:
          actions:
            - action: upsert
              key: collector.name
              value: otel-collector
      
      exporters:
        debug:
          verbosity: detailed
        otlphttp:
          endpoint: http://loki:3100/otlp
        prometheus:
          endpoint: 0.0.0.0:9099
          const_labels:
            label1: value1
      
      extensions:
        health_check:
          endpoint: 0.0.0.0:13133
        zpages:
          endpoint: 0.0.0.0:55679
      
      service:
        extensions: [health_check, zpages]
        pipelines:
          metrics:
            receivers: [otlp]
            processors: [memory_limiter, attributes, batch]
            exporters: [prometheus, debug]
          logs:
            receivers: [otlp]
            processors: [batch, attributes]
            exporters: [otlphttp, debug]

  service_config:
    content: |
      {
        "users": [
          { "id": 1, "name": "Leanne Graham", "username": "Bret", "email": "Sincere@april.biz" },
          { "id": 2, "name": "Ervin Howell","username": "Antonette", "email": "Shanna@melissa.tv" }
        ],
        "posts": [
          { "userId": 1, "id": 1, "title": "sunt aut", "body": "quia et suscipit\nsuscipit recusandae" },
          { "userId": 1, "id": 2, "title": "qui est esse", "body": "est rerum tempore vitae\nsequi sint nihil" },
          { "userId": 1, "id": 3, "title": "ea molestias quasi", "body": "et iusto sed quo iure\nvoluptatem occaecati"},
          { "userId": 2, "id": 11, "title": "et ea vero", "body": "delectus reiciendis molestiae occaecati non minima"}
        ]
      }
